import java.util.*;
class Edge
{
    int src;
    int destn;
    int weight;
    
    Edge(int a,int b,int c)
    {
        src=a;
        destn=b;
        weight=c;
        }
}

class Graph{
    int vertex;
    ArrayList< ArrayList<Edge> >al;
    
    Graph(int num){
        vertex=num;
        al= new ArrayList<>();
        
        for(int i=0; i<vertex ;i++)
        al.add( new ArrayList<Edge>() );
    }
    
    void addEdge(int src,int destn,int weight)
    {
        al.get(src).add( new Edge(src,destn,weight) );
        al.get(destn).add( new Edge(destn,src,weight) );
    }
    
    void printAllNeigbours()
    {
        for(int i=0; i<al.size() ;i++)
        {
            for(int j=0; j<al.get(i).size() ;j++)
            System.out.print( al.get(i).get(j).destn+" ");
            
            System.out.println();
        }
    }
    
    void dijkstra(int src)
    {
        //{distance,vertex}
        PriorityQueue<int[]> pq=new PriorityQueue<>(Comparator.comparingInt(a -> a[0])); //a is the name of pq 
        boolean isVisited[]= new boolean[vertex];
        int distance[]= new int[vertex];  //
         
        Arrays.fill(distance,Integer.MAX_VALUE);
        
        distance[src]= 0;
        
        pq.add(new int[] {0,src});
        
        while(!pq.isEmpty())
        {
            int node[]= pq.poll();  //int node[] is same as int[] node
            int currentDistance= node[0];
            int vertex= node[1];
            
            if(isVisited[vertex]) continue;
            
            isVisited[vertex]= true;
            
            for(Edge edge: al.get(vertex))
            {
                int v= edge.destn;
                int weight= edge.weight;
                
                if(!isVisited[v] && currentDistance+weight < distance[v])
                {
                    distance[v]= currentDistance+weight;
                    pq.add(new int[]{distance[v],v});
                }
            }
        }
        
        for(int value: distance)
        {
            System.out.println(value);
        }
    }
}
public class Main
{
	public static void main(String[] args) {
		Graph g1= new Graph(9);
		
		g1.addEdge(0,1,4);
		g1.addEdge(0,7,8);
		g1.addEdge(1,2,8);
		g1.addEdge(1,7,11);
		g1.addEdge(2,8,2);
		g1.addEdge(2,3,7);
		g1.addEdge(2,5,4);
		g1.addEdge(3,4,9);
		g1.addEdge(3,5,14);
		g1.addEdge(4,5,10);
		g1.addEdge(5,6,2);
		g1.addEdge(6,8,6);
		g1.addEdge(6,7,1);
		g1.addEdge(7,8,7);
	    
	    g1.dijkstra(0);
		
	}
}

  
