class Node {
	int value;
	Node left,right;

	Node(int num) {
		value=num;
		left=right=null;
	}
}

class bst {
	Node root;

	int heightOfNode(Node node) {
		if(node==null)
			return -1;
       
		return 1+Math.max(heightOfNode(node.left),heightOfNode(node.right));
	}

	int balOfNode(Node node) {
		int left=node.left!=null? 1+heightOfNode(node.left):0;
		int right=node.right!=null? 1+heightOfNode(node.right):0;

		return left-right;
	}

	Node insert(Node node,int num) {
		if(node==null)
			return new Node(num);

		else if(num<node.value)
		{
			node.left=insert(node.left,num);
		}

		node.right=insert(node.right,num);
		
		int bal=balOfNode(node);
		    if(bal>1){
		        return rightRotate(node);
		    }
		    else if(bal<-1){
		        return leftRotate(node);
		    }
		    else{
		        return node;
		    }
			
	}
	
	void preorder(Node node){
	    if(node==null)
	    return ;
	    
	    System.out.println(node.value);
	    preorder(node.left);
	    preorder(node.right);
	    
	}

	Node rightRotate(Node node) {
		Node x=node;
		Node y=x.left;
		Node alp=y.right;

		y.right=x;
		x.left=alp;

		return y;
	}

	Node leftRotate(Node node) {
		Node x=root;
		Node y=x.right;
	  Node alp=y.left;

		y.left=x;
		x.right=alp;

		return y;
	}
}

public class Main
{
	public static void main(String[] args) {
	bst t1=new bst();
	
	t1.root=t1.insert(t1.root,50);
	t1.root=t1.insert(t1.root,45);
	t1.root=t1.insert(t1.root,40);
	
	t1.preorder(t1.root);
	}
}
